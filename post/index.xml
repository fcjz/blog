<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on fcjz-blog</title>
    <link>https://fcjz.github.io/blog/post/</link>
    <description>Recent content in Posts on fcjz-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Mar 2023 00:00:45 +0800</lastBuildDate><atom:link href="https://fcjz.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>搭建非线性个人网络笔记本——Tiddlywiki</title>
      <link>https://fcjz.github.io/blog/post/tiddlywiki/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:45 +0800</pubDate>
      
      <guid>https://fcjz.github.io/blog/post/tiddlywiki/</guid>
      <description>搭建非线性个人网络笔记本——Tiddlywiki TiddlyWiki是笔者从去年上半年了解到的知识管理工具，特点是功能丰富、开发活跃、自定义程度高，不过这也是它的缺点——有一些知识管理爱好者的确无法接收如此多用不上的功能，对于他们而言，只想好好记个笔记，那么这的确不是TW的受众，我个人非常喜欢使用TW，也使用它配置了自己的公开数字花园网站，学习安装、使用和部署的过程只能说是十分陡峭，而TW的文档恰恰又不够细致，教程对于很多用户来说更多的是解决基本问题，如果在部署过程中出了错，并没有详细的说明，那么，今天笔者就将个人的经验与TW使用的教程结合起来，便于读者理解和解决问题。
此教程主要针对NodeJS版Wiki，单文件版我目前用来部署网站，之前一直在使用，也会提一提。
为什么使用TiddlyWiki？ 这个问题应该会有无数种答案，正如我开头时所说，它的特点是“功能丰富、开发活跃、自定义程度高”，但这样的话实在有点空，如果让笔者个人来说，那就是——有趣。
在TW中，你可以像搭积木一样在你的Wiki中运用各种姿势展现条目，非常方便地实现条目管理和复用，你可以在Wiki首页建立一个你认为有趣的条目的目录，也许是折叠，也许是侧边栏，找一个你喜欢的方式放置；你可以在其中回答问题、写日记添加心情表情，使用宏和微件添加许多炫酷又不失实用的功能；你可以通过添加特殊标签和字段插入代码更改Wiki样式，让它成为你喜欢的样子。
还可以用它方便地搭建网站，TW的公开网站现如今已经不少，每个都有自己的特色功能，有些条目众多内容丰富，有些功能齐全模板优秀，有些已经自定义到看不出是TW了。
TW的用途也不仅仅局限于记笔记，虽然开发者创立它的初衷的确是知识管理，但已经有教学用途、购物用途之类，群里甚至有朋友分享过一个老虎机网站，使用TW经典版制作……
TW是个充满可能性的工具，它自己就可以是一种哲学，如果你不看教程就自己琢磨使用的话，这点更是如此，因为你永远也不会知道输入在命令行的内容到底会报出什么样的错误……让人心惊胆战，却又乐在其中，可谓屡战屡败，屡败屡战。
部署TiddlyWiki 嗯，到这里就进入本篇博文的正题了，TW是一个自包含的完整的程序，有两种使用方法：
1.单HTML文件形式
2.Node JS文件夹形式
笔者更推荐第二种方式，可以自动保存，更新插件也更加方便，第一种形式则更加独立，不过它并没有权限覆盖自己，所以每次更新都要将Wiki重新下载一次，有些麻烦。
↑唔，如果是部署网站的话，建议使用后文提到的“太记”使用方式，单文件版是直接上传同步推送到GitHub部署就可以了，如果只是单独Node JS的话，我目前只想到使用TiddlyWeb下载单文件到文件夹，再按照单文件部署的方式去做，的确麻烦。如果这方面有解决方案的朋友可以在博文最后找到我的联系方式，提出你的建议，笔者不胜感激。
日常只是使用的话，确实推荐Node JS。
单HTML文件形式 这个形式使用起来是最简单最没有门槛的，适合新手一点点摸索TW的功能。
下载只需要从TW官网的Getting Started页面（往下滑就可以找到）点击下载按钮，几秒钟就可以下载完毕，在浏览器中打开可以看见开始界面，自由探索，自定义Wiki的标题和描述。
你可以看到下载按钮下方有一些使用方式，其它的先看看就好，这里主要推荐timimi浏览器插件，可以自动保存和备份单文件Wiki，不会弹出下载弹窗。
然后就可以开始使用了，最简单的方法是去中文教程查看各种使用方法，从最简单的做起，比如添加和编辑条目。
如果这样配合着使用TW单文件形式，倒是也挺方便的，不过，timimi已经有些时间没有更新，笔者是因为它的屡次失效1而更换形式的。
Node JS文件夹形式 Node JS是TW的主流使用形式，需要node程序TiddlyWiki作为服务端运行，输入相应命令在指定端口打开（端口也可以自定义的，不过没有冲突的情况下，没什么必要修改）。
首先，下载node到自己的电脑中:
Windows系统: 可以去node官网下载，如果网络问题无法下载，参考网络上有关安装和使用node的其它博文，本博客中暂时没有此内容，也建议学习科学上网；还可以用scoop用命令下载这个环境，不过同样可能会遇到下载失败的问题。
MacOS: 和Windows一样可以去官网下载，也可以在本地使用brew install node命令行下载。
Linux: 使用本地命令行工具下载，不同的系统可能安装方式不一样，最好去搜索一下有无此类文章，Ubuntu可以参考这篇文章。TW GitHub给出的是这样的:
Debian/Ubuntu: apt install nodejs May need to be followed up by: apt install npm Arch Linux yay -S tiddlywiki (installs node and tiddlywiki) Android: 不建议使用移动端部署TW，但如果你有这个需要，去F-Droid下载termux，按照它给出的下载命令下载node，之后依照后文步骤行动。
安装完毕后在命令行键入node -v/npm -v，如果出现版本号，说明下载成功，可以开始安装TW了。
在命令行键入以下命令:
# 全局安装TW npm install tiddlywiki -g # 如果网络问题无法安装可以尝试科学上网或用淘宝镜像安装cnpm之后重新下载 npm install -g cnpm --registry=https://registry.</description>
    </item>
    
    <item>
      <title>关于社交媒体</title>
      <link>https://fcjz.github.io/blog/post/socialmedia/</link>
      <pubDate>Tue, 29 Nov 2022 16:56:21 +0800</pubDate>
      
      <guid>https://fcjz.github.io/blog/post/socialmedia/</guid>
      <description>最近，在埃隆·马斯克的新闻中，我加深了对twitter、微博、Facebook、Instagram、tumblr、mastodon的了解，于是我开始尝试着撰写一篇有关社交媒体的博文，讨论我对社交媒体的看法，嗯，对这些个社交媒体平台的看法，以及对社交媒体本身，我都希望能够涉及到。</description>
    </item>
    
    <item>
      <title>使用Hugo制作博客</title>
      <link>https://fcjz.github.io/blog/post/hugo/</link>
      <pubDate>Sun, 23 Oct 2022 14:33:34 +0800</pubDate>
      
      <guid>https://fcjz.github.io/blog/post/hugo/</guid>
      <description>hugo
当今时代，我认为拥有一个独特的博客是十分有趣且重要的，详情请看之前的“简中互联网的产出枯萎了吗？”的博文，我在其中写到了很多有关博客的资料。
那么我们现在进入正题，今天的主角是Hugo。
PS：本文主要面向Windows用户、独立开发者、开源工作者以及想要拥有一个博客的普通用户。
命令行终端推荐使用cmder或者git bash。
我在“About Me”这篇博文中提到过这个博客是使用Hugo制作的，那么Hugo究竟是什么呢？它与同类工具相比有哪些优势和劣势？怎样使用它创建一个属于自己的博客呢？
准备 一台电脑，Windows/macOS/Linux（macOS相对简单一些，但这不代表其他两种操作系统不行）
最好有一个科学上网/网络加速工具（用于访问GitHub、使用git部署博客）
一个markdown编辑器，如typora，其实vscode是不错的选择
最好下载一个更加好用的命令行终端工具，比如cmder，不过系统自带的未必不好，如果你觉得用它们就好，也可以
Hugo Hugo是一个开源的静态网站生成器，简单好用，方便快速、生态丰富，被许多开发者用来搭建博客。我想了想，在我接触过的网站生成器中（Hugo、Hexo、Gridea、Jekyll、Ghost、wordpress、typecho……），目前能够和Hugo比肩的，只有Hexo和wordpress，然而，Hexo配置环境麻烦，博文达到一定数量之后性能会明显下降；wordpress需要使用者购买服务器（wordpress生成的是动态网站），大多数年轻的开发者没有精力和财力去维护这样一个博客，他们只是偶尔记录些什么（不过，如果在看本文的你手头上有闲置的服务器，并且是一个对功能要求比较高的用户，那么wordpress是个很好的选择——功能丰富、易于维护、适合新手）。
让我提出几个问题，如果你对下面问题的回答是肯定的，那么我非常欢迎你继续看下去，因为这样的话，Hugo非常适合你：
你是否要写许多博文，并且持续维护这个博客？ 你是否希望在博文数量达到一定程度的时候生成器的性能不会受到很大影响？ 你是否讨厌配置环境（有些生成器工作需要配合其它工具，安装那些工具的过程我们叫做配置环境）？ 你是否有一定的“折腾能力”（评论之类的功能需要你自己挖掘实现）？ 你是否希望能够快速完成建立博客这个过程（笔者花了半个小时左右）（如果你不想添加别的什么功能，只想写博文的话）？ 我们假设你对它们的回答是肯定的，为了让你更清楚Hugo与其它生成器的优点和缺点（好吧，这里的优点和缺点也都是针对笔者的需求而言的），我们先来对比一下。
Hugo与同类工具相比的优势和劣势 目前已经没有多少人用jekyll了，大多数开发者会选择hugo和hexo，所以网上对比比较多的也是它们，笔者也主要将这两者做对比。
搭建方面 Hugo只是一个用Go语言编写的二进制文件，开箱即用，只要使用者拥有服务器或GitHub账号，就可以轻松生成。
Hexo需要配置环境（Nodejs和git），相比Hugo略显麻烦。
生态方面 Hugo的主题没有Hexo多（只是少十几个），在国内教程较少，英文文档并不易懂，写的稍烂。
Hexo主题稍微多一些，在国内教程较多（在知乎就能见到不少标题为“GitHub+Hexo半小时免费搭建博客”之类的文章），文档虽然说不上好读，但胜在生态丰富，很多人帮着讲解。
性能方面 Hugo的性能要显著高于jekyll和Hexo，曾经有人做过实验，这三种生成器生成585篇文章，分别需要的时间（单位：秒）为：
Jekyll: 15.90 Hugo: 4.90 Hexo的数据应当介于二者之间。 之所以会出现差距，是因为这三种生成器使用的语言不同，准确的说，是语言类型不同。
Hugo使用Go（编译型语言）；Hexo使用nodejs（解释型语言）；jekyll使用ruby（解释型语言）。
编译型语言执行效率高于解释型语言，而同为解释型语言，nodejs的V8引擎比ruby要快。
费用方面 Hugo、Hexo、Jekyll都是开源免费的工具，从搭建到维护不需要花费任何费用。
wordpress据说是很好的工具，不过我并没有深入使用过，这也是今天在这篇博文中我没怎么写到它的原因，既然我不够了解它，无法判断优劣，也就不在这里乱写。
我之所以无法投入使用这款工具，是因为使用它搭建网站需要服务器，而我暂时没有钱来购买，等到我日后有了一定的使用经验，再回到这篇博文来补充。
使用Hugo创建网站 相信能看到这里的你一定是决定了使用Hugo创建网站的人，所以我们开始。
安装Hugo Windows安装，可以去到GitHub，链接在此。
如果你不会使用GitHub，请在最新版本下的Assets中选择与自己电脑对应的安装包，单击，选择好安装位置，就可以开始下载了。（建议下载扩展版本，因为很多漂亮的主题都需要扩展版本中的sass等）
下载完毕后打开文件夹应该会看到hugo的zip文件，使用解压工具（如7-zip）解压缩文件，得到hugo.exe，之后要将hugo.exe复制到建立的网站的目录中。
官网文档中还有其它的下载方式，不过，我觉得用scoop等包管理器下载要更难一些……还是只说这一种吧，最简单了。
终端操作 打开cmder等终端工具，cd至hugo的工作目录，输入hugo version命令，检查hugo版本，如果出现一串号码（例如：hugo v0.101.0-466fa43c16709b4483689930a4f9ac8add5c9f66+extended windows/amd64 BuildDate=2022-06-16T07:09:16Z VendorInfo=gohugoio），说明你安装成功了，可以输入hugo help获取帮助，查看所有命令参数，不过看看就好，很多的命令，初学者用不上，如果只是使用hugo撰写博客的话，只需要记住诸如hugo new post 、hugo之类就可以了。
version
输入hugo help出现的参数如下：
hugo is the main command, used to build your Hugo site.</description>
    </item>
    
    <item>
      <title>互联网的产出在渐渐枯萎吗？</title>
      <link>https://fcjz.github.io/blog/post/text/</link>
      <pubDate>Mon, 22 Aug 2022 17:29:23 +0800</pubDate>
      
      <guid>https://fcjz.github.io/blog/post/text/</guid>
      <description>最近在知乎上看到这样一个问题：互联网的产出在渐渐枯萎吗？
其实前面应该加上一个简中，毕竟原问题说的就是简中互联网的近况，不过高赞回答中“不只是简中，全世界的产出都在渐渐枯萎，只是简中环境要快一些”的论点我比较赞同，所以我连同墙外的情况一起说。
结论 如果让我回答这个问题，我会说：
“是的，世界互联网的产出都在渐渐枯萎，大众沉浸在封闭的社交孤岛中，简中环境下，公众号、微博、豆瓣、知乎、B站；墙外环境下，推特、脸书、Instagram、tumblr。的确，墙外的geek要更多一些，明白要在互联网上独立自由生存并为之做出努力的geek也更多，不过这无法阻止社交媒体的横行——geek本来就是小众不被大众理解的“疯子”群体，绝大多数人只觉得他们对社交媒体的排斥毫无意义——人们不关心去中心化——早已不知道blog到底是些什么东西有什么存在的意义——许多人现在除工作场合根本不用Email——IRC和RSS，我不知道还剩下多少人知道这两个概念——
但是，我仍然抱有希望，我看到很多博主的努力，看到他们在自己的“一亩三分地”辛苦地耕耘，看到他们在延续互联网的精神。
我相信，不久以后，互联网会爆发革命，哪怕只是一群人的狂欢，也能带来一阵子的返璞归真。
但愿我还可以看见充满个性的互联网而不是死板的社交媒体个人主页。”
社交孤岛 当今社会，大众居住在一座座孤岛上，没有联系，没有个性，只剩下展示、点赞、评论，以及资本家获得的流量密码。
大家都心安理得地住着，麻木地点赞、评论、转发……周而复始。
我并不否认这种做法，无论是追求互联网上独特的个人空间还是只是一个可以聊天分享的社交媒体，都是个人的生活方式，都应该受到尊重。
可是我不推广这种做法，这种将自己的数据寄留在大公司的服务器上，寄托在创始人的良心上。我对这种生活方式表示尊重，但开发这项服务并从中获利的人也许并不会。
多少关闭的博客平台证实了这点。你将自己最珍贵的回忆与知识写在上面日夜维护，明天服务商就可能倒闭关停博客，连句再见都不会说。</description>
    </item>
    
  </channel>
</rss>