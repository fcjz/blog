[{"content":"搭建非线性个人网络笔记本——Tiddlywiki TiddlyWiki是笔者从去年上半年了解到的知识管理工具，特点是功能丰富、开发活跃、自定义程度高，不过这也是它的缺点——有一些知识管理爱好者的确无法接收如此多用不上的功能，对于他们而言，只想好好记个笔记，那么这的确不是TW的受众，我个人非常喜欢使用TW，也使用它配置了自己的公开数字花园网站，学习安装、使用和部署的过程只能说是十分陡峭，而TW的文档恰恰又不够细致，教程对于很多用户来说更多的是解决基本问题，如果在部署过程中出了错，并没有详细的说明，那么，今天笔者就将个人的经验与TW使用的教程结合起来，便于读者理解和解决问题。\n此教程主要针对NodeJS版Wiki，单文件版我目前用来部署网站，之前一直在使用，也会提一提。\n为什么使用TiddlyWiki？ 这个问题应该会有无数种答案，正如我开头时所说，它的特点是“功能丰富、开发活跃、自定义程度高”，但这样的话实在有点空，如果让笔者个人来说，那就是——有趣。\n在TW中，你可以像搭积木一样在你的Wiki中运用各种姿势展现条目，非常方便地实现条目管理和复用，你可以在Wiki首页建立一个你认为有趣的条目的目录，也许是折叠，也许是侧边栏，找一个你喜欢的方式放置；你可以在其中回答问题、写日记添加心情表情，使用宏和微件添加许多炫酷又不失实用的功能；你可以通过添加特殊标签和字段插入代码更改Wiki样式，让它成为你喜欢的样子。\n还可以用它方便地搭建网站，TW的公开网站现如今已经不少，每个都有自己的特色功能，有些条目众多内容丰富，有些功能齐全模板优秀，有些已经自定义到看不出是TW了。\nTW的用途也不仅仅局限于记笔记，虽然开发者创立它的初衷的确是知识管理，但已经有教学用途、购物用途之类，群里甚至有朋友分享过一个老虎机网站，使用TW经典版制作……\nTW是个充满可能性的工具，它自己就可以是一种哲学，如果你不看教程就自己琢磨使用的话，这点更是如此，因为你永远也不会知道输入在命令行的内容到底会报出什么样的错误……让人心惊胆战，却又乐在其中，可谓屡战屡败，屡败屡战。\n部署TiddlyWiki 嗯，到这里就进入本篇博文的正题了，TW是一个自包含的完整的程序，有两种使用方法：\n1.单HTML文件形式\n2.Node JS文件夹形式\n笔者更推荐第二种方式，可以自动保存，更新插件也更加方便，第一种形式则更加独立，不过它并没有权限覆盖自己，所以每次更新都要将Wiki重新下载一次，有些麻烦。\n↑唔，如果是部署网站的话，建议使用后文提到的“太记”使用方式，单文件版是直接上传同步推送到GitHub部署就可以了，如果只是单独Node JS的话，我目前只想到使用TiddlyWeb下载单文件到文件夹，再按照单文件部署的方式去做，的确麻烦。如果这方面有解决方案的朋友可以在博文最后找到我的联系方式，提出你的建议，笔者不胜感激。\n日常只是使用的话，确实推荐Node JS。\n单HTML文件形式 这个形式使用起来是最简单最没有门槛的，适合新手一点点摸索TW的功能。\n下载只需要从TW官网的Getting Started页面（往下滑就可以找到）点击下载按钮，几秒钟就可以下载完毕，在浏览器中打开可以看见开始界面，自由探索，自定义Wiki的标题和描述。\n你可以看到下载按钮下方有一些使用方式，其它的先看看就好，这里主要推荐timimi浏览器插件，可以自动保存和备份单文件Wiki，不会弹出下载弹窗。\n然后就可以开始使用了，最简单的方法是去中文教程查看各种使用方法，从最简单的做起，比如添加和编辑条目。\n如果这样配合着使用TW单文件形式，倒是也挺方便的，不过，timimi已经有些时间没有更新，笔者是因为它的屡次失效1而更换形式的。\nNode JS文件夹形式 Node JS是TW的主流使用形式，需要node程序TiddlyWiki作为服务端运行，输入相应命令在指定端口打开（端口也可以自定义的，不过没有冲突的情况下，没什么必要修改）。\n首先，下载node到自己的电脑中:\nWindows系统: 可以去node官网下载，如果网络问题无法下载，参考网络上有关安装和使用node的其它博文，本博客中暂时没有此内容，也建议学习科学上网；还可以用scoop用命令下载这个环境，不过同样可能会遇到下载失败的问题。\nMacOS: 和Windows一样可以去官网下载，也可以在本地使用brew install node命令行下载。\nLinux: 使用本地命令行工具下载，不同的系统可能安装方式不一样，最好去搜索一下有无此类文章，Ubuntu可以参考这篇文章。TW GitHub给出的是这样的:\nDebian/Ubuntu: apt install nodejs May need to be followed up by: apt install npm Arch Linux yay -S tiddlywiki (installs node and tiddlywiki) Android: 不建议使用移动端部署TW，但如果你有这个需要，去F-Droid下载termux，按照它给出的下载命令下载node，之后依照后文步骤行动。\n安装完毕后在命令行键入node -v/npm -v，如果出现版本号，说明下载成功，可以开始安装TW了。\n在命令行键入以下命令:\n# 全局安装TW npm install tiddlywiki -g # 如果网络问题无法安装可以尝试科学上网或用淘宝镜像安装cnpm之后重新下载 npm install -g cnpm --registry=https://registry.npm.taobao.org # 使用cnpm下载TW cnpm install tiddlywiki -g # 如果出现错误则为权限不够，需要用管理员身份重试 sudo npm install -g tiddlywiki (适用于Mac/Linux) # 检查TW版本看看是否成功安装 tiddlywiki --version # 新建Wiki tiddlywiki mynewwiki --init server # 启动Wiki tiddlywiki mynewwiki --listen # 使用Wiki 访问[本地服务器](localhost:8080/) 开始编辑吧！ 到这里，一般来讲，就没有什么问题了，你可以开始使用TW了。\n另附上单文件和文件夹相互转换的命令：\n单文件转文件夹：tiddlywiki --load ./mywiki.html(你的wiki文件) --savewikifolder ./mywikifolder(你的wiki文件夹) 文件夹转单文件：请直接使用TiddlyWeb的Save snapshot for offline use. 不过目前我这边使用转换还存在一定的TypeError问题，仍待解决。\nTidGi形式 基于NodeJS，比起TiddlyDesktop（官方客户端，注重单文件保存相关），这个中文名叫太记的程序更受中国用户欢迎，操作简单方便，偶尔有bug，TWQ群的群主就是开发者本人，也可以直接去问，大家都很热情，可以帮忙解答（当然，除了太记和TW功能相关的探讨，你问NodeJS部署之类的问题不容易被人回答，所以折腾的话还是尽量去国外论坛）。\n太记官网（目前没有官网，现在都是在GitHub更新，Q群946052860也有群友发文件解决各位的网络问题）：https://github.com/tiddly-gittly/TidGi-Desktop\n不喜欢折腾的用户直接用模板是很舒服的，更新只需要等群主发布就可以了。\n缺点就是，偶尔打开会卡并且白屏（我个人使用中出现的问题），一般重启几次会好，不过我更直接的方式是在浏览器打开相应端口，将太记当命令行终端用……\nP2P形式（选看） 这个形式来源于烧杯浏览器，一个已经archive的项目，因为TW本身就是去中心化的，所以这样保存和建站十分方便（使用就是在建网站，建完一件发表），这个项目的消逝令我感到有点不甘心，希望他日能由我或者其他的开发者创立这样一个程序。\n所以它在这篇博文中留有一席之地。\n使用TiddlyWiki 更多教程：\n太微中文教程\n太微入门视频\n太微简易指南\nTW-XP\n搭建非线性个人网络笔记本\n最后一个年份比较长了，可能不会很适用，建议主要观看前面四个。\n国内cpl插件库\n基本上看了这些个就差不多了，但是考虑到很多人没有这个时间和精力一口气看这么多东西（不过这些其实本来也算是工具书吧？哪里不会看哪里），笔者就尽量简短的说明一下。\n新建维基，右上角按钮“+”号是新建笔记的按钮，红色的对勾提醒你保存，点击，如果在没有下载timimi的情况下，会弹出窗口，找个合适的位置下载新文件就是，如果安装了timimi，请在提示保存信息之后看看文件到底有没有真的保存。\n那个小齿轮是控制台，也就是调配功能的地方，可以换主题和配色，选择自动保存与否，配置的密度很小，再小的功能其实都可以自定义，不过有些并没有显示在明面上，如果想要更方便点，可以直接向开发者提issue，不过我想大多数新手不会想的那么多。\n中文包如何导入？在此请点开官方插件库（控制台plugins→目前只有一个插件库，就是它了），点开language，选择简体中文（五星红旗，简繁请自己认），下载。\n之后控制台的字你应该都能看懂了，自己看着配就是，出现JavaScript内部错误请刷新或复制报错内容到GitHub发issue。\n自定义内容请前往太微中文教程的“让太微更易用”目录查看。\ntimimi在笔者开启浏览器一段时间后保存备份会报错，重启浏览器才能解决，不然无法保存，目前还不清楚解决方法。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://fcjz.github.io/blog/post/tiddlywiki/","title":"搭建非线性个人网络笔记本——Tiddlywiki"},{"content":"最近，在埃隆·马斯克的新闻中，我加深了对twitter、微博、Facebook、Instagram、tumblr、mastodon的了解，于是我开始尝试着撰写一篇有关社交媒体的博文，讨论我对社交媒体的看法，嗯，对这些个社交媒体平台的看法，以及对社交媒体本身，我都希望能够涉及到。\n","permalink":"https://fcjz.github.io/blog/post/socialmedia/","title":"关于社交媒体"},{"content":"I have a Digital Garden named notebox and it is opensource.\nnotebox\n","permalink":"https://fcjz.github.io/blog/about/notebox/","title":"Notebox"},{"content":"home:https://fcjz.github.io (This homepage is made using TiddlyWiki, it\u0026rsquo;s more in line with my personality and features, I haven\u0026rsquo;t seen such a readme so far, and I\u0026rsquo;m considering adding it to the readme.)\nblog:https://fcjz.github.io/blog\ngithub:https://github.com/fcjz\ngitlab:https://gitlab.com/fcjz\nnpm:https://www.npmjs.com/~fcjz\nnotebox:https://fcjz.github.io/notebox\nexperiment:https://fcjz.github.io/experiment\nBBS:https://fcjz.freeflarum.com/\nmessage board:https://note.ms/fcjz\nbearblog:https://fcjz.bearblog.dev/\npixiv:https://www.pixiv.net/users/87162343\nbangumi:https://bgm.tv/user/fcjz\ngitter:https://gitter.im/fcjz/community\nmail:imagine-cyf@yandex.com\nmastodon:https://qoto.org/@fcjz\n","permalink":"https://fcjz.github.io/blog/about/links/","title":"Links"},{"content":"This blog is built using hugo, a fast and easy static site builder, and the theme used for the blog is monochrome.\nThe author of the blog is fcjz, and the blog post follows CC-BY-SA-3.0 protocol.\nBlog is a place for author to summarize and organize, different from digital garden notebox, blog post is usually a long article written by fragmented information after classification and fusion.\n","permalink":"https://fcjz.github.io/blog/about/blog/","title":"Blog"},{"content":"📝 I’m @fcjz.\n🧾 I\u0026rsquo;m a entrepreneur/Freelance.\n📑 I am interested in almost everything(Except for homework.), love to try new things, love to learn and create.\n📄 I am a student, but only a small part of my time is spent on my studies, most of the time I am obsessed with researching things that interest me.\n📃 I have no need to seek cooperation. I just signed up for GitHub to have fun, so you can see that I did not write my readme file very carefully. It is the same as the contact information below. If you have anything, please go to my knowledge base. Find me with the blog and explain your purpose.\n📰 I don\u0026rsquo;t have a common social account, and I don\u0026rsquo;t often check the exchanges on GitHub. If you have anything, please leave a message on my blog or knowledge base to explain your purpose.\n📓I\u0026rsquo;ve always been on the fringes of the Internet, maybe you\u0026rsquo;ll find me in a little corner, but I\u0026rsquo;m not without a home, I also have some fixed habitats, the links are below, which includes my blog and knowledge base.\n","permalink":"https://fcjz.github.io/blog/about/about/","title":"About fcjz"},{"content":"hugo\n当今时代，我认为拥有一个独特的博客是十分有趣且重要的，详情请看之前的“简中互联网的产出枯萎了吗？”的博文，我在其中写到了很多有关博客的资料。\n那么我们现在进入正题，今天的主角是Hugo。\nPS：本文主要面向Windows用户、独立开发者、开源工作者以及想要拥有一个博客的普通用户。\n命令行终端推荐使用cmder或者git bash。\n我在“About Me”这篇博文中提到过这个博客是使用Hugo制作的，那么Hugo究竟是什么呢？它与同类工具相比有哪些优势和劣势？怎样使用它创建一个属于自己的博客呢？\n准备 一台电脑，Windows/macOS/Linux（macOS相对简单一些，但这不代表其他两种操作系统不行）\n最好有一个科学上网/网络加速工具（用于访问GitHub、使用git部署博客）\n一个markdown编辑器，如typora，其实vscode是不错的选择\n最好下载一个更加好用的命令行终端工具，比如cmder，不过系统自带的未必不好，如果你觉得用它们就好，也可以\nHugo Hugo是一个开源的静态网站生成器，简单好用，方便快速、生态丰富，被许多开发者用来搭建博客。我想了想，在我接触过的网站生成器中（Hugo、Hexo、Gridea、Jekyll、Ghost、wordpress、typecho……），目前能够和Hugo比肩的，只有Hexo和wordpress，然而，Hexo配置环境麻烦，博文达到一定数量之后性能会明显下降；wordpress需要使用者购买服务器（wordpress生成的是动态网站），大多数年轻的开发者没有精力和财力去维护这样一个博客，他们只是偶尔记录些什么（不过，如果在看本文的你手头上有闲置的服务器，并且是一个对功能要求比较高的用户，那么wordpress是个很好的选择——功能丰富、易于维护、适合新手）。\n让我提出几个问题，如果你对下面问题的回答是肯定的，那么我非常欢迎你继续看下去，因为这样的话，Hugo非常适合你：\n你是否要写许多博文，并且持续维护这个博客？ 你是否希望在博文数量达到一定程度的时候生成器的性能不会受到很大影响？ 你是否讨厌配置环境（有些生成器工作需要配合其它工具，安装那些工具的过程我们叫做配置环境）？ 你是否有一定的“折腾能力”（评论之类的功能需要你自己挖掘实现）？ 你是否希望能够快速完成建立博客这个过程（笔者花了半个小时左右）（如果你不想添加别的什么功能，只想写博文的话）？ 我们假设你对它们的回答是肯定的，为了让你更清楚Hugo与其它生成器的优点和缺点（好吧，这里的优点和缺点也都是针对笔者的需求而言的），我们先来对比一下。\nHugo与同类工具相比的优势和劣势 目前已经没有多少人用jekyll了，大多数开发者会选择hugo和hexo，所以网上对比比较多的也是它们，笔者也主要将这两者做对比。\n搭建方面 Hugo只是一个用Go语言编写的二进制文件，开箱即用，只要使用者拥有服务器或GitHub账号，就可以轻松生成。\nHexo需要配置环境（Nodejs和git），相比Hugo略显麻烦。\n生态方面 Hugo的主题没有Hexo多（只是少十几个），在国内教程较少，英文文档并不易懂，写的稍烂。\nHexo主题稍微多一些，在国内教程较多（在知乎就能见到不少标题为“GitHub+Hexo半小时免费搭建博客”之类的文章），文档虽然说不上好读，但胜在生态丰富，很多人帮着讲解。\n性能方面 Hugo的性能要显著高于jekyll和Hexo，曾经有人做过实验，这三种生成器生成585篇文章，分别需要的时间（单位：秒）为：\nJekyll: 15.90 Hugo: 4.90 Hexo的数据应当介于二者之间。 之所以会出现差距，是因为这三种生成器使用的语言不同，准确的说，是语言类型不同。\nHugo使用Go（编译型语言）；Hexo使用nodejs（解释型语言）；jekyll使用ruby（解释型语言）。\n编译型语言执行效率高于解释型语言，而同为解释型语言，nodejs的V8引擎比ruby要快。\n费用方面 Hugo、Hexo、Jekyll都是开源免费的工具，从搭建到维护不需要花费任何费用。\nwordpress据说是很好的工具，不过我并没有深入使用过，这也是今天在这篇博文中我没怎么写到它的原因，既然我不够了解它，无法判断优劣，也就不在这里乱写。\n我之所以无法投入使用这款工具，是因为使用它搭建网站需要服务器，而我暂时没有钱来购买，等到我日后有了一定的使用经验，再回到这篇博文来补充。\n使用Hugo创建网站 相信能看到这里的你一定是决定了使用Hugo创建网站的人，所以我们开始。\n安装Hugo Windows安装，可以去到GitHub，链接在此。\n如果你不会使用GitHub，请在最新版本下的Assets中选择与自己电脑对应的安装包，单击，选择好安装位置，就可以开始下载了。（建议下载扩展版本，因为很多漂亮的主题都需要扩展版本中的sass等）\n下载完毕后打开文件夹应该会看到hugo的zip文件，使用解压工具（如7-zip）解压缩文件，得到hugo.exe，之后要将hugo.exe复制到建立的网站的目录中。\n官网文档中还有其它的下载方式，不过，我觉得用scoop等包管理器下载要更难一些……还是只说这一种吧，最简单了。\n终端操作 打开cmder等终端工具，cd至hugo的工作目录，输入hugo version命令，检查hugo版本，如果出现一串号码（例如：hugo v0.101.0-466fa43c16709b4483689930a4f9ac8add5c9f66+extended windows/amd64 BuildDate=2022-06-16T07:09:16Z VendorInfo=gohugoio），说明你安装成功了，可以输入hugo help获取帮助，查看所有命令参数，不过看看就好，很多的命令，初学者用不上，如果只是使用hugo撰写博客的话，只需要记住诸如hugo new post 、hugo之类就可以了。\nversion\n输入hugo help出现的参数如下：\nhugo is the main command, used to build your Hugo site.\nHugo is a Fast and Flexible Static Site Generator\nbuilt with love by spf13 and friends in Go.\nComplete documentation is available at https://gohugo.io/.\nUsage:\nhugo [flags] hugo [command]\nAvailable Commands:\ncompletion Generate the autocompletion script for the specified shell\nconfig Print the site configuration\nconvert Convert your content to different formats\ndeploy Deploy your site to a Cloud provider.\nenv Print Hugo version and environment info\ngen A collection of several useful generators.\nhelp Help about any command\nimport Import your site from others.\nlist Listing out various types of content\nmod Various Hugo Modules helpers.\nnew Create new content for your site\nserver A high performance webserver\nversion Print the version number of Hugo\nFlags:\n-b, \u0026ndash;baseURL string hostname (and path) to the root, e.g. https://spf13.com/\n-D, \u0026ndash;buildDrafts include content marked as draft\n-E, \u0026ndash;buildExpired include expired content\n-F, \u0026ndash;buildFuture include content with publishdate in the future\n--cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --cleanDestinationDir remove files from destination not found in static directories --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00 --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026quot;config\u0026quot;) -c, \u0026ndash;contentDir string filesystem path to content directory\n--debug debug output -d, \u0026ndash;destination string filesystem path to write files to\n--disableKinds strings disable different kind of pages (home, RSS etc.) --enableGitInfo add Git revision, date, author, and CODEOWNERS info to the pages -e, \u0026ndash;environment string build environment\n--forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, \u0026ndash;help help for hugo\n--ignoreCache ignores the cache directory --ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern -l, \u0026ndash;layoutDir string filesystem path to layout directory\n--log enable Logging --logFile string log File path (if set, logging enabled automatically) --minify minify any supported output format (HTML, XML etc.) --noBuildLock don't create .hugo_build.lock file --noChmod don't sync permission mode of files --noTimes don't sync modification time of files --panicOnWarning panic on first WARNING log --poll string set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes --printI18nWarnings print missing translations --printMemoryUsage print memory usage to screen at intervals --printPathWarnings print warnings on duplicate target paths etc. --printUnusedTemplates print warnings on unused templates. --quiet build in quiet mode --renderToMemory render to memory (only useful for benchmark testing) -s, \u0026ndash;source string filesystem path to read files relative from\n--templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, \u0026ndash;theme strings themes to use (located in /themes/THEMENAME/)\n--themesDir string filesystem path to themes directory --trace file write trace to file (not useful in general) -v, \u0026ndash;verbose verbose output\n--verboseLog verbose logging -w, \u0026ndash;watch watch filesystem for changes and recreate as needed\nUse \u0026ldquo;hugo [command] \u0026ndash;help\u0026rdquo; for more information about a command.\n我们搭建网站要使用hugo new site命令，请在命令行终端输入hugo new site xxx（将xxx改为你自己的博客名），回车，返回hugo文件夹，你会发现多出了一个名为xxx（你博客的名字）的文件夹，恭喜，hugo已经帮你创建了网站，不过目前还无法访问，因为还缺少一些东西，我们需要补上它们。\n首先，我们需要将hugo.exe复制到xxx文件夹目录中，否则无法进行接下来的操作（毕竟我们没有将hugo添加到系统环境变量）。\n添加完之后你的网站目录应该是这样的：\ncontent\n接下来，我们要修改目录下的config.toml文件，要配置好languageCode和title，baseURL目前不能修改，不然之后hugo server会遇到困难，等到测试好网站再去修改；theme要等到配置好主题再去修改，这是我们之后要做的。\n将languageCode参数修改为\u0026quot;zh-CN\u0026quot;。\n将title修改为你网站的名称，随便起一个你喜欢的就好，例如\u0026quot;xxx\u0026rsquo;s blog\u0026quot;。\n其实还可以配置一些其它的参数，如果你是看过参考链接再来看这篇博文，你会知道有博主写过其它参数让读者参考，官网有这方面的文档，在这里作者就先不往多了说了。\n要搭建一个博客，这些已经足够了。\nPS：请不要删除引号。\n到这一步，如果是hexo，已经可以看看示例网站了，不过这是hugo，所以还不行，为什么呢？因为hexo预设了一个主题，而hugo没有预设主题，我们还需要添加一个主题才能开启网站。\n官网收集了众多主题，你可以挑选一个最喜欢的作为博客主题，另外提醒一下，挑选主题不要只看颜值高低，也要看功能如何，还得关注它所匹配的hugo版本，有些主题，例如我所使用的monochrome，需要用到hugo的扩展版本。\n一般来讲，主题的介绍页面都写了如何安装，基本上主题都是开源的，可以在GitHub上找到源码，可以通过GitHub链接下载。\n接着编辑之前的config.toml文件，配置theme为你的主题名。\n这是笔者的配置，可以为读者做个参考：\nbaseURL = 'https://fcjz.github.io/blog/' languageCode = 'en-us' title = 'fcjz-blog' theme = 'hugo-theme-monochrome' defaultContentLanguage = \u0026quot;en\u0026quot; enableEmoji = true paginate = 5 disqusShortname = \u0026quot;fcjz\u0026quot; googleAnalytics = \u0026quot;fcjz\u0026quot; [params] author = \u0026quot;fcjz\u0026quot; enable_open_graph = false navbar_title = \u0026quot;fcjz-blog\u0026quot; footer = \u0026quot;Copyright © 2022 by fcjz\u0026quot; enable_toc = true enable_collapsible_toc = false enable_collapsible_changelogs = false enable_math = true enable_zooming_js = false enable_site_search = true [params.list_layout] enable_group_by_year = true enable_show_date = true enable_pagination = false [param.syntax_highlight] lib = \u0026quot;builtin\u0026quot; [param.syntax_highlight.builtin] enable_code_copy = true [markup.highlight] codeFences = false lineNos = false [taxonomies] category = \u0026quot;categories\u0026quot; tag = \u0026quot;tags\u0026quot; series = \u0026quot;series\u0026quot; [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] [[menu.navbar]] identifier = \u0026quot;something\u0026quot; name = \u0026quot;something\u0026quot; title = \u0026quot;about\u0026quot; url = \u0026quot;/something/\u0026quot; weight = 1 [[menu.navbar]] identifier = \u0026quot;library\u0026quot; name = \u0026quot;library\u0026quot; url = \u0026quot;/library/\u0026quot; weight = 2 [[menu.navbar]] identifier = \u0026quot;post\u0026quot; name = \u0026quot;post\u0026quot; url = \u0026quot;/post/\u0026quot; weight = 3 [[menu.navbar]] identifier = \u0026quot;now\u0026quot; name = \u0026quot;now\u0026quot; url = \u0026quot;/now/\u0026quot; weight = 4 做完这些，你其实已经可以使用命令运行hugo的内置服务器，在本地端口查看效果的，但是空有一个主题，博客里空空荡荡的实在不好看，而且你应当先熟悉一下markdown的使用，所以让我们使用hugo new post/xxx.md命令新建一篇博文吧。\n要使用markdown撰写文章，你需要有一个编辑器，typora是一个很有名的工具，不过闭源，且这两年已经转到了付费模式，我更推荐vscode，虽然它是一个代码编辑器甚至IDE，但优秀的代码编辑器和优秀的markdown编辑器并不冲突。它的插件市场中有非常好用的编辑预览插件，事实上，我大多数时间并不用它写代码，而是写博文……好了现在不是说这个的时候。\n如果不出意外，返回content中的post文件夹，你会看到一个崭新的md文件，将它点开，随便写点什么吧，实在不知道写什么可以打“HelloWorld”，不错的话术，是优秀的示例，你会发现很多项目在引导入门者时都喜欢用HelloWorld。\n建议你去学习一些markdown的语法知识，这会对你今后写博文有所帮助，如果你只知道“#”、“##”的话，虽然说仍然能够正常使用，但想要添加一些独特的形式表达文字会变得困难。\n当你完成了一篇令自己满意的博文，例如：\n--- title: \u0026quot;firstpost\u0026quot; date: 2022-11-29T16:56:21+08:00 draft: true --- HelloWorld！ 就可以保存，回到命令行终端，键入hugo server -d，在localhost:1313端口预览博客效果了，希望你能对自己的博客感到满意。\n如果你按照上述的博文示例写了博文保存预览，只输入了hugo server，省略了-d，你会发现预览的博客中没有文章，这是因为draft的设置为“true”，也就是这是一篇草稿文章，并没有正式发布，-d的意思是显示带草稿文章的预览，所以你可以看见文章。\n如果你想正式发表这篇文章，请将draft的设置改为“false”。\n到这里，博客的配置和博文的发表就已经结束了。\n但是现在只有你能够看到博客和其中的内容，互联网上的其他人根本不知道有这么一个小角落存在，那么，在不花费费用的前提下，该怎么将博客部署成网站，让人们看到它呢？\n使用GitHub pages部署博客 笔者使用的是git bash，很多用户对于技术并不熟悉，这样的话可以选用GitHub desktop，这是一个git的图形化工具，也就是，有形象的界面，不像命令行那样冷冰冰的（不过很多geek中意冷冰冰的风格）。\nGitHub desktop的使用非常简单，这里不再多说，我们主要说命令行，这也是笔者比较熟悉的。\n首先，我们需要一个GitHub账号，如果你不知道GitHub是什么，我并不感觉你很差，但我对你是怎样知道hugo并找到我这篇博文有点感兴趣，据我所知，不知道开源以及GitHub的人很难接触到这样一个静态网站生成器，即使它在社区挺有名。\nGitHub是一个开源社区、一个代码托管平台，具备一系列完整的开源项目工作流程，你可以在其中找到各种各样的资源，学习并增长技术，挖掘好用的工具和值得关注的程序员。\nGitHub的官网为https://github.com ，很好记的，访问这个链接，先欣赏一下它酷炫的首页，然后点击右上角的“Sigh Up”，填写你的相关信息，完成注册流程，配置……\n建立一个名为\u0026quot;xxx.github.io\u0026quot;的仓库（将xxx改为你的GitHub用户名）是最好的（暂时不要添加readme和许可证），如果你想建一个和这个不同名称的仓库来托管博客，要记住，博客部署之后的链接一定不会是xxx.github.io，而是xxx.github.io/yyy（yyy是你的仓库名）。\n在命令行终端键入hugo生成静态网站到本地的public文件夹（之前截图中的public，不是别处的public）。\n点进文件夹，右键选中git bash here，打开git，登录git，键入以下命令：\ngit remote add origin https://github.com/xxx/xxx.github.io （xxx是你的GitHub用户名，再强调一遍，注意大小写，如果你的仓库不叫xxx.github.io，就写仓库名字。这个命令是建立起本地和GitHub远程仓库之间的联系） git add -A （这里会弹出一堆警告，可以忽视） git status （这里是检查仓库情况） git commit -m \u0026quot;abcd\u0026quot; （这里是提交，abcd为提交信息，可以替换为\u0026quot;add new post\u0026quot;之类，实际上只要是英文随便写点什么都行，不过建议还是好好对待自己的提交信息，这样以后遇到什么问题可以回退历史记录，commit信息可以帮助你明确这么多次提交博客的自己到底干了什么） git push -u origin master （与远程仓库同步，也是最后一步，嗯，理论上的最后一步，如果你的网络没有问题的话） GitHub提供一个名叫GitHub pages的工具，可以帮你托管静态网站，包括我们现在的这个静态博客，点击仓库上方工具栏的“setting”，侧边栏点击“GitHub pages”，选择部署根目录（root）为master，save保存，等待几分钟，访问xxx.github.io或xxx.github.io/yyy，你可以看到你的博客。\n之后如果有博文更新或者修改一些配置，重复之前的流程：\n撰写博文后保存，命令行终端hugo生成静态网站到public。\n转到public文件夹右键打开git bash，这个时候因为我们已经建立了远程仓库，所以不用再次绑定了，不在输入git remote命令。\ngit add git commit -m \u0026quot;abcd\u0026quot; git push -u origin master 等待几分钟，博客就更新成功了。\n接下来，我会撰写几篇有关git和GitHub的博文，如果你在进行上述操作中遇到了问题，可以来看这两篇博文，到时候我会将链接附在相关链接上，哦，也许我现在就应该搜集一些有关GitHub和git的博文。\n祝你建站愉快。\n参考链接 Hugo 与 Hexo 的异同\n静态博客框架jekyll、hexo和hugo三者之间的区别与差异\nHugo 从入门到会用\n世界上最快静态博客生成工具 Hugo 入门折腾\nHugo文档\n这些参考链接写作时间不同，作者们的想法、写作风格也不一样，笔者可以说是结合了他们给出的资料和看法，再加上自己本来的意见，写就了这篇博文，我觉得这些链接也很有价值，里面有一些东西笔者也尚未弄清（如果你要问笔者为何还没有将这些全部弄清就来写博文，笔者会回答：因为学习一样东西的最好方式之一，是尝试将其教授给他人。另外，笔者没有弄清的东西在这篇文章中也并没有写到，我想不会误人子弟），推荐大家在看完此文后也去看看这些链接。\n收尾 感谢大家的观看，目前笔者还没有设置评论功能，有什么改进意见和问题可以在留言板留言，或给笔者发邮件。\n","permalink":"https://fcjz.github.io/blog/post/hugo/","title":"使用Hugo制作博客"},{"content":"最近在知乎上看到这样一个问题：互联网的产出在渐渐枯萎吗？\n其实前面应该加上一个简中，毕竟原问题说的就是简中互联网的近况，不过高赞回答中“不只是简中，全世界的产出都在渐渐枯萎，只是简中环境要快一些”的论点我比较赞同，所以我连同墙外的情况一起说。\n结论 如果让我回答这个问题，我会说：\n“是的，世界互联网的产出都在渐渐枯萎，大众沉浸在封闭的社交孤岛中，简中环境下，公众号、微博、豆瓣、知乎、B站；墙外环境下，推特、脸书、Instagram、tumblr。的确，墙外的geek要更多一些，明白要在互联网上独立自由生存并为之做出努力的geek也更多，不过这无法阻止社交媒体的横行——geek本来就是小众不被大众理解的“疯子”群体，绝大多数人只觉得他们对社交媒体的排斥毫无意义——人们不关心去中心化——早已不知道blog到底是些什么东西有什么存在的意义——许多人现在除工作场合根本不用Email——IRC和RSS，我不知道还剩下多少人知道这两个概念——\n但是，我仍然抱有希望，我看到很多博主的努力，看到他们在自己的“一亩三分地”辛苦地耕耘，看到他们在延续互联网的精神。\n我相信，不久以后，互联网会爆发革命，哪怕只是一群人的狂欢，也能带来一阵子的返璞归真。\n但愿我还可以看见充满个性的互联网而不是死板的社交媒体个人主页。”\n社交孤岛 当今社会，大众居住在一座座孤岛上，没有联系，没有个性，只剩下展示、点赞、评论，以及资本家获得的流量密码。\n大家都心安理得地住着，麻木地点赞、评论、转发……周而复始。\n我并不否认这种做法，无论是追求互联网上独特的个人空间还是只是一个可以聊天分享的社交媒体，都是个人的生活方式，都应该受到尊重。\n可是我不推广这种做法，这种将自己的数据寄留在大公司的服务器上，寄托在创始人的良心上。我对这种生活方式表示尊重，但开发这项服务并从中获利的人也许并不会。\n多少关闭的博客平台证实了这点。你将自己最珍贵的回忆与知识写在上面日夜维护，明天服务商就可能倒闭关停博客，连句再见都不会说。\n","permalink":"https://fcjz.github.io/blog/post/text/","title":"互联网的产出在渐渐枯萎吗？"}]